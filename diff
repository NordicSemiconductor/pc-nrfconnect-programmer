diff --git a/package-lock.json b/package-lock.json
index 244fe75..d55e6ec 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -10,7 +10,7 @@
             "license": "SEE LICENSE IN LICENSE",
             "devDependencies": {
                 "nrf-intel-hex": "^1.2.0",
-                "pc-nrfconnect-shared": "github:NordicSemiconductor/pc-nrfconnect-shared#v75"
+                "pc-nrfconnect-shared": "github:NordicSemiconductor/pc-nrfconnect-shared#feat/nrfutil-device-clean"
             },
             "engines": {
                 "nrfconnect": ">=4.0.0"
@@ -5627,6 +5627,12 @@
                 "node": ">= 6"
             }
         },
+        "node_modules/cancelable-promise": {
+            "version": "4.3.1",
+            "resolved": "https://registry.npmjs.org/cancelable-promise/-/cancelable-promise-4.3.1.tgz",
+            "integrity": "sha512-A/8PwLk/T7IJDfUdQ68NR24QHa8rIlnN/stiJEBo6dmVUkD4K14LswG0w3VwdeK/o7qOwRUR1k2MhK5Rpy2m7A==",
+            "dev": true
+        },
         "node_modules/caniuse-lite": {
             "version": "1.0.30001491",
             "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001491.tgz",
@@ -15848,8 +15854,8 @@
             }
         },
         "node_modules/pc-nrfconnect-shared": {
-            "version": "75.0.0",
-            "resolved": "git+ssh://git@github.com/NordicSemiconductor/pc-nrfconnect-shared.git#03e46cadc2404741417d0a88c1e0f68d213f3809",
+            "version": "74.0.0",
+            "resolved": "git+ssh://git@github.com/NordicSemiconductor/pc-nrfconnect-shared.git#fb4ff1673c0b8d3697dce86254d2bbc9bc442c91",
             "dev": true,
             "hasInstallScript": true,
             "license": "ISC",
@@ -15886,6 +15892,7 @@
                 "adm-zip": "^0.5.5",
                 "autoprefixer": "10.4.14",
                 "bootstrap": "4.6.2",
+                "cancelable-promise": "^4.3.1",
                 "commander": "10.0.0",
                 "date-fns": "2.29.3",
                 "electron": "22.3.5",
diff --git a/package.json b/package.json
index 238d81f..7fe237a 100644
--- a/package.json
+++ b/package.json
@@ -13,6 +13,11 @@
     "engines": {
         "nrfconnect": ">=4.0.0"
     },
+    "nrfutil": {
+        "device": [
+            "1.2.2"
+        ]
+    },
     "main": "dist/bundle.js",
     "files": [
         "dist/",
@@ -39,7 +44,7 @@
     },
     "devDependencies": {
         "nrf-intel-hex": "^1.2.0",
-        "pc-nrfconnect-shared": "github:NordicSemiconductor/pc-nrfconnect-shared#v75"
+        "pc-nrfconnect-shared": "github:NordicSemiconductor/pc-nrfconnect-shared#feat/nrfutil-device-clean"
     },
     "eslintConfig": {
         "extends": "./node_modules/pc-nrfconnect-shared/config/eslintrc"
diff --git a/src/actions/jlinkTargetActions.ts b/src/actions/jlinkTargetActions.ts
index 822b263..4800b22 100644
--- a/src/actions/jlinkTargetActions.ts
+++ b/src/actions/jlinkTargetActions.ts
@@ -5,17 +5,19 @@
  */
 
 import { dialog, getCurrentWindow } from '@electron/remote';
-import nrfdl, {
-    Device,
-    FirmwareReadResult,
-} from '@nordicsemiconductor/nrf-device-lib-js';
 import fs from 'fs';
 import MemoryMap, { MemoryMaps } from 'nrf-intel-hex';
 import {
     AppThunk,
     describeError,
-    getDeviceLibContext,
+    Device,
+    firmwareRead,
+    getCoreInfo,
+    getProtectionStatus,
     logger,
+    programBuffer,
+    recover as nrfUtilRecover,
+    reset,
     selectedDevice,
     usageData,
 } from 'pc-nrfconnect-shared';
@@ -37,7 +39,6 @@ import {
 import { RootState } from '../reducers/types';
 import {
     CoreDefinition,
-    coreFriendlyName,
     DeviceDefinition,
     getDeviceInfoByJlink,
     updateCoreInfo,
@@ -51,7 +52,7 @@ export const openDevice =
     async (dispatch, getState) => {
         dispatch(loadingStart());
         logger.info(
-            'Using @nordicsemiconductor/nrf-device-lib-js to communicate with target via JLink'
+            'Using nrfutil device to communicate with target via JLink'
         );
 
         logDeviceInfo(device);
@@ -116,24 +117,9 @@ const logDeviceInfo = (device: Device) => {
 const getDeviceMemMap = (device: Device, coreInfo: CoreDefinition) =>
     new Promise<MemoryMap>((resolve, reject) => {
         logger.info(`Reading memory for ${coreInfo.name} core`);
-        nrfdl.firmwareRead(
-            getDeviceLibContext(),
-            device.id,
-            'NRFDL_FW_BUFFER',
-            'NRFDL_FW_INTEL_HEX',
-            result => {
-                if ((result as nrfdl.Error).message) {
-                    usageData.sendErrorReport(
-                        `Failed to get device memory map: ${describeError(
-                            result
-                        )}`
-                    );
-                    reject();
-                    return;
-                }
-
-                const buffer = (result as FirmwareReadResult).buffer || '';
-                const hexText = Buffer.from(buffer, 'base64').toString('utf8');
+        firmwareRead(device, coreInfo.name)
+            .then(hexBuffer => {
+                const hexText = hexBuffer.toString('utf8');
                 const memMap = MemoryMap.fromHex(hexText);
 
                 const paddedArray = memMap.slicePad(
@@ -146,12 +132,13 @@ const getDeviceMemMap = (device: Device, coreInfo: CoreDefinition) =>
                     `Reading memory for ${coreInfo.name} core completed`
                 );
                 resolve(paddedMemMap);
-            },
-            () => {},
-            null,
-            null,
-            coreInfo.name
-        );
+            })
+            .catch(error => {
+                usageData.sendErrorReport(
+                    `Failed to get device memory map: ${describeError(error)}`
+                );
+                reject(error);
+            });
     });
 
 /*
@@ -287,11 +274,7 @@ const recoverOneCore = async (device: Device, coreInfo: CoreDefinition) => {
     logger.info(`Recovering ${coreInfo.name} core`);
 
     try {
-        await nrfdl.deviceControlRecover(
-            getDeviceLibContext(),
-            device.id,
-            coreInfo.name
-        );
+        await nrfUtilRecover(device, coreInfo.name);
         logger.info(`Recovering ${coreInfo.name} core completed`);
         return;
     } catch (error) {
@@ -334,26 +317,11 @@ const writeHex = (
     new Promise<void>((resolve, reject) => {
         logger.info(`Writing HEX to ${coreInfo.name} core`);
 
-        nrfdl.firmwareProgram(
-            getDeviceLibContext(),
-            device.id,
-            'NRFDL_FW_BUFFER',
-            'NRFDL_FW_INTEL_HEX',
+        programBuffer(
+            device,
             Buffer.from(hexFileString, 'utf8'),
-            error => {
-                if (error) {
-                    usageData.sendErrorReport(
-                        `Device programming failed with error: ${describeError(
-                            error
-                        )}`
-                    );
-                    reject(error); // This is new behavior
-                    return;
-                }
-                logger.info(`Writing HEX to ${coreInfo.name} core completed`);
-                resolve();
-            },
-            ({ progressJson: progress }: nrfdl.Progress.CallbackParameters) => {
+            'hex',
+            progress => {
                 const message = progress.message || '';
 
                 const status = `${message.replace('.', ':')} ${
@@ -361,9 +329,20 @@ const writeHex = (
                 }%`;
                 logger.info(status);
             },
-            null,
             coreInfo.name
-        );
+        )
+            .then(() => {
+                logger.info(`Writing HEX to ${coreInfo.name} core completed`);
+                resolve();
+            })
+            .catch(error => {
+                usageData.sendErrorReport(
+                    `Device programming failed with error: ${describeError(
+                        error
+                    )}`
+                );
+                reject(error); // This is new behavior
+            });
     });
 
 const writeOneCore = async (
@@ -434,7 +413,7 @@ export const recoverAndWrite =
     };
 
 export const resetDevice = (device: Device) =>
-    nrfdl.deviceControlReset(getDeviceLibContext(), device.id).then(() => {
+    reset(device).then(() => {
         logger.info(`Resetting device completed`);
     });
 
@@ -480,31 +459,19 @@ const updateCoresWithNrfdl = async (
     const updateCore = async (core: CoreDefinition, index: number) => {
         try {
             logger.info(
-                `Reading readback protection status for ${coreFriendlyName(
-                    core.name
-                )} core`
+                `Reading readback protection status for ${core.name} core`
             );
 
-            const result = await nrfdl.deviceControlGetProtectionStatus(
-                getDeviceLibContext(),
-                device.id,
-                core.name
-            );
+            const result = await getProtectionStatus(device, core.name);
 
             logger.info(
-                `Readback protection status for ${coreFriendlyName(
-                    core.name
-                )} core: ${result.protectionStatus}`
+                `Readback protection status for ${core.name} core: ${result.protectionStatus}`
             );
 
             if (result.protectionStatus !== 'NRFDL_PROTECTION_STATUS_NONE') {
                 return core;
             }
-            const deviceCoreInfo = await nrfdl.getDeviceCoreInfo(
-                getDeviceLibContext(),
-                device.id,
-                core.name
-            );
+            const deviceCoreInfo = await getCoreInfo(device, core.name);
 
             return updateCoreInfo(
                 core,
diff --git a/src/actions/mcubootTargetActions.ts b/src/actions/mcubootTargetActions.ts
index f379f66..7c8192b 100644
--- a/src/actions/mcubootTargetActions.ts
+++ b/src/actions/mcubootTargetActions.ts
@@ -4,13 +4,13 @@
  * SPDX-License-Identifier: LicenseRef-Nordic-4-Clause
  */
 
-import nrfdl from '@nordicsemiconductor/nrf-device-lib-js';
 import {
     AppThunk,
     describeError,
     Device,
-    getDeviceLibContext,
     logger,
+    program,
+    Progress,
     selectedDevice,
     usageData,
 } from 'pc-nrfconnect-shared';
@@ -91,46 +91,30 @@ export const canWrite = (): AppThunk<RootState> => (dispatch, getState) => {
 
 export const performUpdate = (
     device: Device,
-    onProgress: (progress: nrfdl.Progress.Operation) => void,
-    mcubootFilePath?: string,
-    zipFilePath?: string,
+    dfuFilePath: string,
+    onProgress: (progress: Progress) => void,
     netCoreUploadDelay?: number
 ) =>
     new Promise<void>((resolve, reject) => {
-        const dfuFilePath = mcubootFilePath || zipFilePath;
-        const firmwareFormat = mcubootFilePath
-            ? 'NRFDL_FW_INTEL_HEX'
-            : 'NRFDL_FW_MCUBOOT_MULTI_IMAGE';
         logger.info(`Writing ${dfuFilePath} to device ${device.serialNumber}`);
 
-        nrfdl.firmwareProgram(
-            getDeviceLibContext(),
-            device.id,
-            'NRFDL_FW_FILE',
-            firmwareFormat,
-            dfuFilePath as string,
-            error => {
-                if (!error) {
-                    logger.info('MCUboot DFU completed successfully!');
-                    resolve();
-                } else {
-                    let errorMsg = describeError(error);
-                    logger.error(`MCUboot DFU failed with error: ${errorMsg}`);
-                    // To be fixed in nrfdl
-                    // @ts-expect-error will be fixed in nrfdl
-                    if (error.error_code === 0x25b) {
-                        errorMsg =
-                            'Please make sure that the device is in MCUboot mode and try again.';
-                    }
-                    logger.error(errorMsg);
-                    reject(new Error(errorMsg));
+        // TODO: Fix force mcuboot trait when possible from CLI
+        program(device, dfuFilePath, onProgress, undefined, {
+            netCoreUploadDelay,
+        })
+            .then(() => {
+                logger.info('MCUboot DFU completed successfully!');
+                resolve();
+            })
+            .catch(error => {
+                let errorMsg = describeError(error);
+                logger.error(`MCUboot DFU failed with error: ${errorMsg}`);
+                // To be fixed in nrfdl
+                if (error.error_code === 0x25b) {
+                    errorMsg =
+                        'Please make sure that the device is in MCUboot mode and try again.';
                 }
-            },
-            ({ progressJson: progress }: nrfdl.Progress.CallbackParameters) => {
-                onProgress(progress);
-            },
-            netCoreUploadDelay !== undefined
-                ? { netCoreUploadDelay }
-                : undefined
-        );
+                logger.error(errorMsg);
+                reject(new Error(errorMsg));
+            });
     });
diff --git a/src/actions/modemTargetActions.ts b/src/actions/modemTargetActions.ts
index 6c9d310..7cc8672 100644
--- a/src/actions/modemTargetActions.ts
+++ b/src/actions/modemTargetActions.ts
@@ -4,18 +4,19 @@
  * SPDX-License-Identifier: LicenseRef-Nordic-4-Clause
  */
 
-import nrfdl, { Device } from '@nordicsemiconductor/nrf-device-lib-js';
 import {
     describeError,
-    getDeviceLibContext,
+    Device,
     logger,
+    program,
+    Progress,
     usageData,
 } from 'pc-nrfconnect-shared';
 
 export const performUpdate = (
     device: Device,
     fileName: string,
-    onProgress: (progress: nrfdl.Progress.Operation) => void
+    onProgress: (progress: Progress) => void
 ) =>
     new Promise<void>((resolve, reject) => {
         logger.info('Modem DFU starts to write...');
@@ -23,31 +24,20 @@ export const performUpdate = (
             `Writing ${fileName} to device ${device.serialNumber || ''}`
         );
 
-        nrfdl.firmwareProgram(
-            getDeviceLibContext(),
-            device.id,
-            'NRFDL_FW_FILE',
-            'NRFDL_FW_NRF91_MODEM',
-            fileName,
-            error => {
-                if (error) {
-                    let errorMsg = describeError(error);
-                    logger.error(`Modem DFU failed with error: ${errorMsg}`);
-                    // @ts-expect-error To be fixed in nrfdl
-                    if (error.error_code === 0x25b) {
-                        errorMsg =
-                            'Please make sure that the device is in MCUboot mode and try again.';
-                    }
-
-                    usageData.sendErrorReport(errorMsg);
-                    reject(new Error(errorMsg));
-                } else {
-                    logger.info('Modem DFU completed successfully!');
-                    resolve();
+        program(device, fileName, onProgress)
+            .then(() => {
+                logger.info('Modem DFU completed successfully!');
+                resolve();
+            })
+            .catch(error => {
+                let errorMsg = describeError(error);
+                logger.error(`Modem DFU failed with error: ${errorMsg}`);
+                if (error.error_code === 0x25b) {
+                    errorMsg =
+                        'Please make sure that the device is in MCUboot mode and try again.';
                 }
-            },
-            ({ progressJson: progress }: nrfdl.Progress.CallbackParameters) => {
-                onProgress(progress);
-            }
-        );
+
+                usageData.sendErrorReport(errorMsg);
+                reject(new Error(errorMsg));
+            });
     });
diff --git a/src/actions/regionsActions.ts b/src/actions/regionsActions.ts
index 6468d20..fd49a7f 100644
--- a/src/actions/regionsActions.ts
+++ b/src/actions/regionsActions.ts
@@ -12,7 +12,7 @@ import {
 } from '../reducers/fileReducer';
 import { RootState } from '../reducers/types';
 import { fileWarningAdd, fileWarningRemove } from '../reducers/warningReducer';
-import { CoreDefinition, coreFriendlyName } from '../util/devices';
+import { CoreDefinition } from '../util/devices';
 import {
     defaultRegion,
     getFileRegions,
@@ -157,11 +157,7 @@ export const updateFileRegions =
 
         let regions: Region[] = [];
         cores.forEach((core: CoreDefinition) => {
-            logger.info(
-                `Update files regions according to ${coreFriendlyName(
-                    core.name
-                )} core`
-            );
+            logger.info(`Update files regions according to ${core.name} core`);
             regions = [...regions, ...getFileRegions(file.memMaps, core)];
         });
 
diff --git a/src/actions/usbsdfuTargetActions.ts b/src/actions/usbsdfuTargetActions.ts
index d63d172..3f6973f 100644
--- a/src/actions/usbsdfuTargetActions.ts
+++ b/src/actions/usbsdfuTargetActions.ts
@@ -4,14 +4,6 @@
  * SPDX-License-Identifier: LicenseRef-Nordic-4-Clause
  */
 
-import {
-    deviceControlReset,
-    Error,
-    firmwareProgram,
-    FWInfo,
-    Progress,
-    readFwInfo,
-} from '@nordicsemiconductor/nrf-device-lib-js';
 import Crypto from 'crypto';
 import MemoryMap from 'nrf-intel-hex';
 import {
@@ -20,10 +12,13 @@ import {
     describeError,
     Device,
     DfuImage,
+    FWInfoImageType,
     FwType,
-    getDeviceLibContext,
+    getFwInfo,
     HashType,
     logger,
+    programBuffer,
+    reset,
     sdfuOperations,
     selectedDevice,
     setWaitForDevice,
@@ -73,7 +68,7 @@ export const openDevice =
     (device: Device): AppThunk =>
     dispatch => {
         logger.info(
-            'Using @nordicsemiconductor/nrf-device-lib-js to communicate with target via USB SDFU protocol'
+            'Using nrfutil-device to communicate with target via USB SDFU protocol'
         );
         usageData.sendUsageData(
             EventAction.OPEN_DEVICE_FAMILY,
@@ -95,10 +90,7 @@ const refreshMemoryLayout =
             switchToBootloaderMode(
                 device,
                 async deviceInBootLoader => {
-                    const fwInfo: FWInfo.ReadResult = await readFwInfo(
-                        getDeviceLibContext(),
-                        deviceInBootLoader.id
-                    );
+                    const fwInfo = await getFwInfo(deviceInBootLoader);
                     const deviceInfo = getDeviceInfoByUSB(deviceInBootLoader);
                     dispatch(targetInfoKnown(deviceInfo));
 
@@ -155,7 +147,7 @@ const refreshMemoryLayout =
 
                     // Add bootloader, softDevice, applications to regions
                     const { imageInfoList } = fwInfo;
-                    imageInfoList.forEach((image: FWInfo.Image) => {
+                    imageInfoList.forEach(image => {
                         const { imageType, imageLocation, version } = image;
 
                         if (!imageLocation) return;
@@ -171,7 +163,7 @@ const refreshMemoryLayout =
                         const regionName =
                             (<
                                 Partial<{
-                                    [key in FWInfo.ImageType]: RegionName;
+                                    [key in FWInfoImageType]: RegionName;
                                 }>
                             >{
                                 NRFDL_IMAGE_TYPE_BOOTLOADER:
@@ -185,7 +177,7 @@ const refreshMemoryLayout =
                         const color =
                             (<
                                 Partial<{
-                                    [key in FWInfo.ImageType]: RegionColor;
+                                    [key in FWInfoImageType]: RegionColor;
                                 }>
                             >{
                                 NRFDL_IMAGE_TYPE_BOOTLOADER:
@@ -226,7 +218,7 @@ const refreshMemoryLayout =
     };
 
 export const resetDevice = (device: Device) =>
-    deviceControlReset(getDeviceLibContext(), device.id).then(() => {
+    reset(device).then(() => {
         logger.info(`Resetting device completed`);
     });
 
@@ -513,46 +505,38 @@ const operateDFU = async (device: Device, inputDfuImages: DfuImage[]) => {
     let prevPercentage: number;
 
     return new Promise<void>((resolve, reject) => {
-        firmwareProgram(
-            getDeviceLibContext(),
-            device.id,
-            'NRFDL_FW_BUFFER',
-            'NRFDL_FW_SDFU_ZIP',
-            zipBuffer,
-            (error?: Error) => {
-                if (error) {
-                    if (nrfdlErrorSdfuExtSdVersionFailure(error)) {
-                        logger.error('Failed to write to the target device');
-                        logger.error(
-                            'The required SoftDevice version does not match'
-                        );
-                    } else {
-                        logger.error(describeError(error));
-                    }
-                    reject(error);
-                } else {
-                    logger.info(
-                        'All dfu images have been written to the target device'
-                    );
-                    resolve();
-                }
-            },
-            ({ progressJson: progress }: Progress.CallbackParameters) => {
-                // Don't repeat percentage steps that have already been logged.
-                if (prevPercentage === progress.progressPercentage) {
-                    return;
-                }
+        programBuffer(device, zipBuffer, 'zip', progress => {
+            // Don't repeat percentage steps that have already been logged.
+            if (prevPercentage === progress.progressPercentage) {
+                return;
+            }
 
-                const message = progress.message || '';
+            const message = progress.message || '';
 
-                const status = `${message.replace('.', ':')} ${
-                    progress.progressPercentage
-                }%`;
+            const status = `${message.replace('.', ':')} ${
+                progress.progressPercentage
+            }%`;
 
-                logger.info(status);
-                prevPercentage = progress.progressPercentage;
-            }
-        );
+            logger.info(status);
+            prevPercentage = progress.progressPercentage;
+        })
+            .then(() => {
+                logger.info(
+                    'All dfu images have been written to the target device'
+                );
+                resolve();
+            })
+            .catch(error => {
+                if (nrfdlErrorSdfuExtSdVersionFailure(error)) {
+                    logger.error('Failed to write to the target device');
+                    logger.error(
+                        'The required SoftDevice version does not match'
+                    );
+                } else {
+                    logger.error(describeError(error));
+                }
+                reject(error);
+            });
     });
 };
 
diff --git a/src/components/ControlPanel.tsx b/src/components/ControlPanel.tsx
index 9aa0ec0..f6a5e90 100644
--- a/src/components/ControlPanel.tsx
+++ b/src/components/ControlPanel.tsx
@@ -341,6 +341,8 @@ const ControlPanel = () => {
                     <span className="mdi mdi-refresh" />
                     Read
                 </Button>
+            </Group>
+            <Group heading="Jlink Settings">
                 <Toggle
                     onToggle={() => dispatch(settingsActions.toggleAutoRead())}
                     isToggled={autoRead}
@@ -365,6 +367,8 @@ const ControlPanel = () => {
                         )}
                     </>
                 </Toggle>
+            </Group>
+            <Group heading="MCUboot Settings">
                 <Toggle
                     onToggle={v => {
                         dispatch(setForceMcuBoot(v));
diff --git a/src/components/CoreInfoView.tsx b/src/components/CoreInfoView.tsx
index a45d7e6..4b31da1 100644
--- a/src/components/CoreInfoView.tsx
+++ b/src/components/CoreInfoView.tsx
@@ -5,9 +5,8 @@
  */
 
 import React from 'react';
-import { DeviceCore } from '@nordicsemiconductor/nrf-device-lib-js';
+import { DeviceCore } from 'pc-nrfconnect-shared';
 
-import { coreFriendlyName } from '../util/devices';
 import { hexpad8 } from '../util/hexpad';
 
 const hexpad9 = (x: number) => hexpad8(x || '');
@@ -23,7 +22,7 @@ const CoreInfoView = ({ name, romBaseAddr, romSize }: CoreInfoViewProps) => (
         {name && (
             <div>
                 <h5>Core name</h5>
-                <p>{coreFriendlyName(name)}</p>
+                <p>{name}</p>
             </div>
         )}
         <div>
diff --git a/src/components/McuUpdateDialogView.tsx b/src/components/McuUpdateDialogView.tsx
index c347847..5310c97 100644
--- a/src/components/McuUpdateDialogView.tsx
+++ b/src/components/McuUpdateDialogView.tsx
@@ -11,7 +11,6 @@ import OverlayTrigger from 'react-bootstrap/OverlayTrigger';
 import ProgressBar from 'react-bootstrap/ProgressBar';
 import Tooltip from 'react-bootstrap/Tooltip';
 import { useDispatch, useSelector } from 'react-redux';
-import nrfdl from '@nordicsemiconductor/nrf-device-lib-js';
 import {
     Alert,
     classNames,
@@ -21,11 +20,13 @@ import {
     getPersistentStore,
     logger,
     NumberInlineInput,
+    Progress,
     selectedDevice,
     setWaitForDevice,
     Slider,
     Toggle,
     useStopwatch,
+    WithRequired,
 } from 'pc-nrfconnect-shared';
 
 import { canWrite, performUpdate } from '../actions/mcubootTargetActions';
@@ -41,7 +42,8 @@ const TOOLTIP_TEXT =
 const NET_CORE_UPLOAD_DELAY = 120;
 
 const McuUpdateDialogView = () => {
-    const [progress, setProgress] = useState<nrfdl.Progress.Operation>();
+    const [progress, setProgress] =
+        useState<WithRequired<Progress, 'message'>>();
     const [writing, setWriting] = useState(false);
     const [writingFail, setWritingFail] = useState(false);
     const [writingSucceed, setWritingSucceed] = useState(false);
@@ -54,6 +56,8 @@ const McuUpdateDialogView = () => {
     const mcubootFwPath = useSelector(getMcubootFilePath);
     const zipFilePath = useSelector(getZipFilePath);
 
+    const fwPath = mcubootFwPath || zipFilePath;
+
     const [netCoreUploadDelayOffset, setNetCoreUploadDelayOffset] =
         useState(-1);
 
@@ -128,6 +132,11 @@ const McuUpdateDialogView = () => {
             return;
         }
 
+        if (!fwPath) {
+            logger.error('No file selected');
+            return;
+        }
+
         setWriting(true);
         reset();
         start();
@@ -142,8 +151,9 @@ const McuUpdateDialogView = () => {
 
         performUpdate(
             device,
+            fwPath,
             programmingProgress => {
-                let updatedProgress: nrfdl.Progress.Operation = {
+                let updatedProgress: WithRequired<Progress, 'message'> = {
                     ...programmingProgress,
                     message: programmingProgress.message ?? '',
                 };
@@ -167,8 +177,6 @@ const McuUpdateDialogView = () => {
                 }
                 setProgress(updatedProgress);
             },
-            mcubootFwPath,
-            zipFilePath,
             showDelayTimeout ? uploadDelay : undefined
         )
             .then(() => {
diff --git a/src/components/ModemUpdateDialogView.tsx b/src/components/ModemUpdateDialogView.tsx
index 8876392..09aa014 100644
--- a/src/components/ModemUpdateDialogView.tsx
+++ b/src/components/ModemUpdateDialogView.tsx
@@ -8,14 +8,15 @@ import React, { useCallback, useEffect, useState } from 'react';
 import Form from 'react-bootstrap/Form';
 import ProgressBar from 'react-bootstrap/ProgressBar';
 import { useDispatch, useSelector } from 'react-redux';
-import nrfdl from '@nordicsemiconductor/nrf-device-lib-js';
 import {
     Alert,
     DialogButton,
     GenericDialog,
     logger,
+    Progress,
     selectedDevice,
     useStopwatch,
+    WithRequired,
 } from 'pc-nrfconnect-shared';
 
 import { performUpdate } from '../actions/modemTargetActions';
@@ -27,7 +28,8 @@ import {
 import { getForceMcuBoot } from '../reducers/settingsReducer';
 
 const ModemUpdateDialogView = () => {
-    const [progress, setProgress] = useState<nrfdl.Progress.Operation>();
+    const [progress, setProgress] =
+        useState<WithRequired<Progress, 'message'>>();
     const [writing, setWriting] = useState(false);
     const [writingFail, setWritingFail] = useState(false);
     const [writingSucceed, setWritingSucceed] = useState(false);
@@ -80,7 +82,7 @@ const ModemUpdateDialogView = () => {
         setProgress(progress);
 
         performUpdate(device, modemFwName, programmingProgress => {
-            let updatedProgress: nrfdl.Progress.Operation = {
+            let updatedProgress: WithRequired<Progress, 'message'> = {
                 ...programmingProgress,
                 message: programmingProgress.message ?? '',
             };
diff --git a/src/util/devices.ts b/src/util/devices.ts
index d7e2a80..4d8cb3c 100644
--- a/src/util/devices.ts
+++ b/src/util/devices.ts
@@ -4,11 +4,12 @@
  * SPDX-License-Identifier: LicenseRef-Nordic-4-Clause
  */
 
-import nrfdl, {
+import {
     DeviceCore,
     DeviceCoreInfo,
     ProtectionStatus,
-} from '@nordicsemiconductor/nrf-device-lib-js';
+} from 'pc-nrfconnect-shared';
+import { NrfutilDevice } from 'pc-nrfconnect-shared/typings/generated/src/Nrfutil/deviceTypes';
 
 import range from './range';
 
@@ -35,7 +36,7 @@ export type CoreDefinition = {
  * Default definition of device core
  */
 export const defaultCore: CoreDefinition = {
-    name: 'NRFDL_DEVICE_CORE_APPLICATION',
+    name: 'Application',
     coreNumber: 0,
     romBaseAddr: 0x0,
     romSize: 0x100000, // 1 MB
@@ -125,7 +126,7 @@ export const deviceDefinitions: DeviceDefinition[] = [
             {
                 ...defaultCore,
                 coreNumber: 0,
-                name: 'NRFDL_DEVICE_CORE_APPLICATION',
+                name: 'Application',
                 romBaseAddr: 0x0,
                 romSize: 0x100000, // 1 MB
                 ficrBaseAddr: 0xff0000,
@@ -134,7 +135,7 @@ export const deviceDefinitions: DeviceDefinition[] = [
             {
                 ...defaultCore,
                 coreNumber: 1,
-                name: 'NRFDL_DEVICE_CORE_NETWORK',
+                name: 'Network',
                 romBaseAddr: 0x1000000,
                 romSize: 0x40000, // 256 KB
                 ficrBaseAddr: 0x1ff0000,
@@ -144,13 +145,6 @@ export const deviceDefinitions: DeviceDefinition[] = [
     },
 ];
 
-export const coreFriendlyName = (coreName: DeviceCore) =>
-    ({
-        NRFDL_DEVICE_CORE_APPLICATION: 'Application',
-        NRFDL_DEVICE_CORE_MODEM: 'Modem',
-        NRFDL_DEVICE_CORE_NETWORK: 'Network',
-    }[coreName] ?? coreName);
-
 /**
  * Nordic SoftDevice Id referring to pc-nrfutil
  */
@@ -247,7 +241,7 @@ const getDeviceDefinitionByFamily = (
     );
 };
 
-const getProductId = (device: nrfdl.Device) => {
+const getProductId = (device: NrfutilDevice) => {
     if (!device.serialPorts) return 0;
 
     return parseInt(
@@ -259,7 +253,7 @@ const getProductId = (device: nrfdl.Device) => {
     );
 };
 
-const identifyUsbByVersion = (device: nrfdl.Device) => {
+const identifyUsbByVersion = (device: NrfutilDevice) => {
     if (!device.hwInfo || device.hwInfo.deviceVersion?.length === 0)
         return null;
 
@@ -268,7 +262,7 @@ const identifyUsbByVersion = (device: nrfdl.Device) => {
     );
 };
 
-const identifyUsbBySerialPort = (device: nrfdl.Device) => {
+const identifyUsbBySerialPort = (device: NrfutilDevice) => {
     const productId = getProductId(device);
 
     // nRF52
@@ -285,14 +279,14 @@ const identifyUsbBySerialPort = (device: nrfdl.Device) => {
 };
 
 // Get device info by calling version command
-export const getDeviceInfoByUSB = (device: nrfdl.Device) =>
+export const getDeviceInfoByUSB = (device: NrfutilDevice) =>
     identifyUsbByVersion(device) ||
     identifyUsbBySerialPort(device) ||
     defaultDeviceDefinition;
 
 // Get device info by calling @nordicsemiconductor/nrf-device-lib-js
 export const getDeviceInfoByJlink = (
-    device: nrfdl.Device
+    device: NrfutilDevice
 ): DeviceDefinition => {
     const type = device.jlink?.deviceVersion;
     const family = device.jlink?.deviceFamily as DeviceFamily;
diff --git a/src/util/regions.ts b/src/util/regions.ts
index e3617b8..691df82 100644
--- a/src/util/regions.ts
+++ b/src/util/regions.ts
@@ -6,11 +6,11 @@
 
 /* eslint-disable no-bitwise */
 
-import { FWInfo } from '@nordicsemiconductor/nrf-device-lib-js';
 import MemoryMap, { MemoryMaps, Overlaps } from 'nrf-intel-hex';
 import { logger } from 'pc-nrfconnect-shared';
+import { SemanticVersion } from 'pc-nrfconnect-shared/typings/generated/src/Nrfutil/sandboxTypes';
 
-import { CoreDefinition, coreFriendlyName, DeviceDefinition } from './devices';
+import { CoreDefinition, DeviceDefinition } from './devices';
 import { hexpad2 } from './hexpad';
 
 const SOFTDEVICE_MAGIC_START = 0x1000;
@@ -64,7 +64,7 @@ export enum RegionColor {
  */
 export interface Region {
     name: RegionName;
-    version?: number | FWInfo.SemanticVersion | string;
+    version?: number | SemanticVersion | string;
     startAddress: number;
     regionSize: number;
     color: RegionColor;
@@ -633,9 +633,7 @@ export const getCoreRegions = (
     memMaps: MemoryMaps,
     coreInfo: CoreDefinition
 ): Region[] => {
-    logger.info(
-        `Parse memory regions for ${coreFriendlyName(coreInfo.name)} core`
-    );
+    logger.info(`Parse memory regions for ${coreInfo.name} core`);
     const overlaps = MemoryMap.overlapMemoryMaps(memMaps);
     const regions = getRegionsFromOverlaps(overlaps, coreInfo);
 
